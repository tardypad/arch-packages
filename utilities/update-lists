#!/bin/sh
# commands used:
# - pacconf
# - paclist
# - pacman

init_variables() {
  COMMAND=${0##*/}

  TMP_FILE_1=$( mktemp )
  TMP_FILE_2=$( mktemp )
  TMP_FILE_3=$( mktemp )
  trap 'rm "${TMP_FILE_1}" "${TMP_FILE_2}" "${TMP_FILE_3}"' EXIT
}

usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>]

	Update lists of explicitely installed packages per repository
	ignoring the base system packages

	Needs to be run from the repository root

	Options:
	  -h,  --help    show this message only
	EOF
}

error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} --help' for more information."
  exit 1
} >&2

update_lists() {
  # ignore base packages
  IGNORE_PACKAGES=$( pacman -Qqg base base-devel )

  # ignore system packages installed during installation
  IGNORE_PACKAGES="${IGNORE_PACKAGES}
efibootmgr
grub
intel-ucode
os-prober
"

  EXPLICIT_PACKAGES=$( pacman -Qqe )

  for REPO in $( pacconf --repo-list ); do
    REPO_PACKAGES_FILE="lists/${REPO}"

    echo "${EXPLICIT_PACKAGES}" | sort > "${TMP_FILE_1}"
    paclist "${REPO}" | cut -f1 -d' ' | sort > "${TMP_FILE_2}"
    REPO_PACKAGES=$( comm -12 "${TMP_FILE_1}" "${TMP_FILE_2}" )

    echo "${REPO_PACKAGES}" | sort > "${TMP_FILE_1}"
    echo "${IGNORE_PACKAGES}" | sort > "${TMP_FILE_2}"
    FILTERED_REPO_PACKAGES=$( comm -23 "${TMP_FILE_1}" "${TMP_FILE_2}" )

    FINAL_REPO_PACKAGES=
    if [ ! -f "${REPO_PACKAGES_FILE}" ]; then
      FINAL_REPO_PACKAGES="${FILTERED_REPO_PACKAGES}"
    else
      echo "${FILTERED_REPO_PACKAGES}" > "${TMP_FILE_1}"
      FINAL_REPO_PACKAGES=$(
        merge_packages_files "${REPO_PACKAGES_FILE}" "${TMP_FILE_1}"
      )
    fi

    echo "${FINAL_REPO_PACKAGES}" > "${REPO_PACKAGES_FILE}"
  done
}

merge_packages_files() {
  # old file contains the packages list with comments to keep
  OLD_PACKAGES_FILE="$1"
  NEW_PACKAGES_FILE="$2"

  cut -f1 -d' ' "${OLD_PACKAGES_FILE}" > "${TMP_FILE_3}"
  COMMON_PACKAGES=$( comm -12 "${TMP_FILE_3}" "${NEW_PACKAGES_FILE}" )
  NEW_PACKAGES=$( comm -13 "${TMP_FILE_3}" "${NEW_PACKAGES_FILE}" )

  {
    echo "${COMMON_PACKAGES}" \
      | while read -r COMMON_PACKAGE; do
          grep -E "^${COMMON_PACKAGE}( |$)" "${OLD_PACKAGES_FILE}"
        done;
    echo "${NEW_PACKAGES}";
  } \
    | grep -v '^$' \
    | sort -k 1,1
}

parse_options() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      *)
        error "Invalid option '$1'"
        ;;
    esac
  done
}

init_variables
parse_options "$@"

update_lists
