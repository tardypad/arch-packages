#!/bin/sh
# commands used:
# - pacman

init_variables() {
  COMMAND=${0##*/}

  TMP_DIR='/tmp/packages_list'
  trap 'rm -rf "${TMP_DIR}"' EXIT
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>]

	Update lists of explicitely installed packages per repository
	ignoring the base system packages

	Needs to be run from the repository root

	Options:
	  -h,  --help    show this message only
	EOF
}

parse_command_line() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help)
        show_usage
        exit 0
        ;;
      *)
        exit_error "Invalid option '$1'"
        ;;
    esac
  done
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} --help' for more information."
  exit 1
} >&2

update_lists() {
  {
    # ignore base packages
    pacman -Qqg base base-devel;
    # ignore system packages installed during installation
    echo efibootmgr
    echo grub
    echo intel-ucode
    echo os-prober
  } | sort > "${TMP_DIR}/ignored_pkgs"

  # group all explicitely installed packages per repo
  pacman -Qqe \
    | while read -r PACKAGE; do
        PACKAGE_REPO=$( pacman -Sp --print-format '%r' "${PACKAGE}" )
        echo "${PACKAGE}" >> "${TMP_DIR}/repos/${PACKAGE_REPO}"
      done

  find "${TMP_DIR}/repos" -type f \
    | while read -r REPO_PACKAGES; do
        REPO="${REPO_PACKAGES##*/}"

        sort "${REPO_PACKAGES}" > "${TMP_DIR}/repo_pkgs"
        comm -23 "${TMP_DIR}/repo_pkgs" "${TMP_DIR}/ignored_pkgs" \
          > "${TMP_DIR}/filtered_repo_pkgs"

        if [ ! -f "lists/${REPO}" ]; then
          cp "${TMP_DIR}/filtered_repo_pkgs" "lists/${REPO}"
          continue
        fi

        # merge repo packages data
        cut -f1 -d' ' "lists/${REPO}" > "${TMP_DIR}/old_pkgs"
        {
          # common packages
          comm -12 "${TMP_DIR}/old_pkgs" "${TMP_DIR}/filtered_repo_pkgs" \
            | while read -r COMMON_PACKAGE; do
                grep -E "^${COMMON_PACKAGE}( |$)" "lists/${REPO}"
              done;
          # new packages
          comm -13 "${TMP_DIR}/old_pkgs" "${TMP_DIR}/filtered_repo_pkgs"
        } \
          | grep -v '^$' \
          | sort -k 1,1 \
          > "${TMP_DIR}/final_pkgs"
        cp "${TMP_DIR}/final_pkgs" "lists/${REPO}"
      done
}

init_variables
parse_command_line "$@"

rm -rf "${TMP_DIR}"
mkdir -p "${TMP_DIR}/repos"

update_lists
